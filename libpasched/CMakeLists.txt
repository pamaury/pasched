cmake_minimum_required(VERSION 2.6)
project(pasched)
set(CMAKE_MODULE_PATH ${pasched_SOURCE_DIR}/cmake/Modules ${CMAKE_MODULE_PATH})

option(HAS_SYMPHONY "Enable SYMPHONY support" OFF)
option(BUILD_STATIC_LIB "Build static library instead of a shared one" OFF)
option(ENABLE_DAG_AUTO_CHECK_CONSISTENCY "Enable automatic consistency check in schedule DAGs (really expensive)" OFF)
option(ENABLE_SCHED_AUTO_CHECK_RP "Enable automatic check of register pressure in schedulers" OFF)
option(ENABLE_EXPENSIVE_SCHED_AUTO_CHECK_RP "Enable expensive automatic check of register pressure in schedulers" OFF)
option(ENABLE_XFORM_AUTO_CHECK_RP "Enable automatic check of register pressure in transformations" OFF)
option(ENABLE_XFORM_TIME_STAT "Enable time statistics for transformations" OFF)
option(ENABLE_SCHED_TIME_STAT "Enable time statistics for schedulers" OFF)

include(FindGLPK)
if(HAS_SYMPHONY AND NOT GLPK_FOUND)
    message(SEND_ERROR "You need GLPK to compile this library")
endif(HAS_SYMPHONY AND NOT GLPK_FOUND)

include(FindCoinUtils)
if(HAS_SYMPHONY AND NOT COIN_UTILS_FOUND)
    message(SEND_ERROR "You need CoinUtils to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT COIN_UTILS_FOUND)

include(FindClp)
if(HAS_SYMPHONY AND NOT CLP_FOUND)
    message(SEND_ERROR "You need Clp to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT CLP_FOUND)

include(FindCgl)
if(HAS_SYMPHONY AND NOT CGL_FOUND)
    message(SEND_ERROR "You need Cgl to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT CGL_FOUND)

include(FindOsi)
if(HAS_SYMPHONY AND NOT OSI_FOUND)
    message(SEND_ERROR "You need Osi to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT OSI_FOUND)

include(FindOsiClp)
if(HAS_SYMPHONY AND NOT OSI_CLP_FOUND)
    message(SEND_ERROR "You need OsiClp to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT OSI_CLP_FOUND)

include(FindSYMPHONY)
if(HAS_SYMPHONY AND NOT SYMPHONY_FOUND)
    message(SEND_ERROR "You need SYMPHONY to compile this library with SYMPHONY support")
endif(HAS_SYMPHONY AND NOT SYMPHONY_FOUND)

file(GLOB pasched_SOURCE_FILES src/*.cpp)
file(GLOB pasched_PUBLIC_HEADERS include/*.hpp)
file(GLOB pasched_LIBPASCHED_HEADERS include/libpasched/*.hpp)

include_directories(${pasched_SOURCE_DIR}/include/libpasched)
include_directories(${GLPK_INCLUDE_DIR})
if(HAS_SYMPHONY)
    include_directories(${COIN_UTILS_INCLUDE_DIR})
    include_directories(${CLP_INCLUDE_DIR})
    include_directories(${CGL_INCLUDE_DIR})
    include_directories(${OSI_INCLUDE_DIR})
    include_directories(${OSI_CLP_INCLUDE_DIR})
    include_directories(${SYMPHONY_INCLUDE_DIR})
endif(HAS_SYMPHONY)

if(BUILD_STATIC_LIB)
    add_library(pasched STATIC ${pasched_SOURCE_FILES})
else(BUILD_STATIC_LIB)
    add_library(pasched SHARED ${pasched_SOURCE_FILES})
endif(BUILD_STATIC_LIB)

target_link_libraries(pasched ${GLPK_LIBRARY})
if(HAS_SYMPHONY)
    target_link_libraries(pasched ${COIN_UTILS_LIBRARY})
    target_link_libraries(pasched ${CLP_LIBRARY})
    target_link_libraries(pasched ${CGL_LIBRARY})
    target_link_libraries(pasched ${OSI_LIBRARY})
    target_link_libraries(pasched ${OSI_CLP_LIBRARY})
    target_link_libraries(pasched ${SYMPHONY_LIBRARY})
endif(HAS_SYMPHONY)

CONFIGURE_FILE(${pasched_SOURCE_DIR}/include/libpasched/config.hpp.cmake ${pasched_SOURCE_DIR}/include/libpasched/config.hpp)

set(CMAKE_CXX_FLAGS_PROFILE "-pg -g")
set(CMAKE_C_FLAGS_PROFILE "-pg -g")

if(CMAKE_COMPILER_IS_GNUCC)
    add_definitions("-Wall -pedantic")
endif(CMAKE_COMPILER_IS_GNUCC)

if(BUILD_STATIC_LIB)
    install(TARGETS pasched ARCHIVE DESTINATION lib)
else(BUILD_STATIC_LIB)
    install(TARGETS pasched LIBRARY DESTINATION lib)
endif(BUILD_STATIC_LIB)
install(FILES ${pasched_PUBLIC_HEADERS} DESTINATION include)
install(FILES ${pasched_LIBPASCHED_HEADERS} DESTINATION include/libpasched)

