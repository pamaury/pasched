cmake_minimum_required(VERSION 2.6)
project(pasched)
set(CMAKE_MODULE_PATH ${pasched_SOURCE_DIR}/cmake/Modules ${CMAKE_MODULE_PATH})

include(FindGLPK)
if(NOT GLPK_FOUND)
    message(SEND_ERROR "You need GLPK to compile this library")
endif(NOT GLPK_FOUND)

include(FindCoinUtils)
if(NOT COIN_UTILS_FOUND)
    message(SEND_ERROR "You need CoinUtils to compile this library")
endif(NOT COIN_UTILS_FOUND)

include(FindClp)
if(NOT CLP_FOUND)
    message(SEND_ERROR "You need Clp to compile this library")
endif(NOT CLP_FOUND)

include(FindCgl)
if(NOT CGL_FOUND)
    message(SEND_ERROR "You need Cgl to compile this library")
endif(NOT CGL_FOUND)

include(FindOsi)
if(NOT OSI_FOUND)
    message(SEND_ERROR "You need Osi to compile this library")
endif(NOT OSI_FOUND)

include(FindOsiClp)
if(NOT OSI_CLP_FOUND)
    message(SEND_ERROR "You need OsiClp to compile this library")
endif(NOT OSI_CLP_FOUND)

include(FindSYMPHONY)
if(NOT SYMPHONY_FOUND)
    message(SEND_ERROR "You need SYMPHONY to compile this library")
endif(NOT SYMPHONY_FOUND)

file(GLOB pasched_SOURCE_FILES src/*.cpp)
file(GLOB pasched_PUBLIC_HEADERS include/*.hpp)
file(GLOB pasched_LIBPASCHED_HEADERS include/libpasched/*.hpp)

add_definitions(-g -pedantic -W -Wall)
include_directories(${pasched_SOURCE_DIR}/include/libpasched)
include_directories(${GLPK_INCLUDE_DIR})
include_directories(${COIN_UTILS_INCLUDE_DIR})
include_directories(${CLP_INCLUDE_DIR})
include_directories(${CGL_INCLUDE_DIR})
include_directories(${OSI_INCLUDE_DIR})
include_directories(${OSI_CLP_INCLUDE_DIR})
include_directories(${SYMPHONY_INCLUDE_DIR})
add_library(pasched SHARED ${pasched_SOURCE_FILES})
target_link_libraries(pasched ${GLPK_LIBRARY})
target_link_libraries(pasched ${COIN_UTILS_LIBRARY})
target_link_libraries(pasched ${CLP_LIBRARY})
target_link_libraries(pasched ${CGL_LIBRARY})
target_link_libraries(pasched ${OSI_LIBRARY})
target_link_libraries(pasched ${OSI_CLP_LIBRARY})
target_link_libraries(pasched ${SYMPHONY_LIBRARY})

install(TARGETS pasched LIBRARY DESTINATION lib)
install(FILES ${pasched_PUBLIC_HEADERS} DESTINATION include)
install(FILES ${pasched_LIBPASCHED_HEADERS} DESTINATION include/libpasched)
